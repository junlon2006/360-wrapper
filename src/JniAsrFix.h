/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#ifndef _Included_JniAsrFix_
#define _Included_JniAsrFix_

#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     JniAsrFix
 * Method:    getResult
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL getVersion(JNIEnv*, jobject);

/*
 * Class:     JniAsrFix
 * Method:    init
 * Signature: (Ljava/lang/String;S)I
 */
JNIEXPORT jint JNICALL init(JNIEnv*, jobject, jstring, jstring, jshort);

/*
 * Class:     JniAsrFix
 * Method:    setValue
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL setOptionInt(JNIEnv*, jobject, jint, jint);

/*
 * Class: JniAsrFix
 * Method: get value
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL getOptionInt(JNIEnv*, jobject, jint);

/*
 * Class: JniAsrFix
 * Method: get value in string
 * Signature: (ILjava/lang/String;)Ljava/lang/String
 */
JNIEXPORT jstring JNICALL getOptionString(JNIEnv*, jobject, jint, jstring);
/*
 * Class:     JniAsrFix
 * Method:    setValue
 * Signature: (ILjava/lang/String;)I
 */
JNIEXPORT jint JNICALL setOptionString(JNIEnv*, jobject, jint, jstring);

/*
 * Class:     JniAsrFix
 * Method:    start
 * Signature: (Ljava/lang/String;I)I
 */
JNIEXPORT jint JNICALL start(JNIEnv*, jobject, jstring, jint);

/*
 * Class:     JniAsrFix
 * Method:    reset
 * Signature: (Ljava/lang/String/String;)I
 */
JNIEXPORT jint JNICALL reset(JNIEnv*, jobject, jstring, jstring);

/*
 * Class:     JniAsrFix
 * Method:    stop
 * Signature: ()I
 */
JNIEXPORT jint JNICALL stop(JNIEnv*, jobject);

/*
 * Class:     JniAsrFix
 * Method:    search
 * Signature: (Ljava/lang/String/String;)I
 */
JNIEXPORT jstring JNICALL search(JNIEnv*, jobject, jstring, jstring);

/*
 * Class:     JniAsrFix
 * Method:    isactive
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL isactive(JNIEnv* env, jobject, jbyteArray raw, jint len);

/*
 * Class:     JniAsrFix
 * Method:    recognize
 * Signature: ([BI)I
 */
JNIEXPORT jint JNICALL recognize(JNIEnv*, jobject, jbyteArray, jint);

/*
 * Class:     JniAsrFix
 * Method:    getResult
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL getResult(JNIEnv*, jobject);

/*
 * Class:     JniAsrFix
 * Method:    cancel
 * Signature: ()I
 */
JNIEXPORT jint JNICALL cancel(JNIEnv*, jobject);

/*
 * Class:     JniAsrFix
 * Method:    release
 * Signature: ()V
 */
JNIEXPORT void JNICALL release(JNIEnv*, jobject);

/*
 * Class: JniAsrFix
 * Method: isEngineIdle();
 * Signature:()I
 */
JNIEXPORT jint JNICALL isEngineIdle(JNIEnv*, jobject);
/*
 * Class:     JniAsrFix
 * Method:    loadGrammarStr
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL loadGrammarStr(JNIEnv*, jobject, jstring);

/*
 * Class:     JniAsrFix
 * Method:    unloadGrammar
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL unloadGrammar(JNIEnv*, jobject, jstring);

/*
 * Class:     JniAsrFix
 * Method:    InitUserDataCompiler
 * Signature: (Ljava/lang/String;)J
 */
JNIEXPORT jlong JNICALL initUserDataCompiler(JNIEnv*, jobject, jstring);

/*
 * Class:     JniAsrFix
 * Method:    getTagsInfo
 * Signature: (J)Ljava/lang/lang;
 */
JNIEXPORT jstring JNICALL getTagsInfo(JNIEnv*, jobject, jlong);

/*
 * Class:     JniAsrFix
 * Method:    loadCompiledJsgf
 * Signature: (JLjava/lang/String;)I;
 */
JNIEXPORT jint JNICALL loadCompiledJsgf(JNIEnv*, jobject, jlong, jstring);

/*
 * Class:     JniAsrFix
 * Method:    compileDynamicUserData
 * Signature: (JLjava/lang/String;Ljava/lang/String;)I;
 */
JNIEXPORT jint JNICALL compileDynamicUserData(JNIEnv*, jobject, jlong, jstring,
                                              jstring);

/*
 * Class:     JniAsrFix
 * Method:    CompileUserData
 * Signature: (JLjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL compileUserData(JNIEnv*, jobject, jlong, jstring,
                                       jstring, jstring);

/*
 * Class:     JniAsrFix
 * Method:    CompileUserData
 * Signature: (JLjava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL partialCompileUserData(JNIEnv*, jobject, jlong, jstring,
                                              jstring, jstring, jstring,
                                              jstring);

/*
 * Class:     JniAsrFix
 * Method:    DestropyUserDataCompiler
 * Signature: (J)V
 */
JNIEXPORT void JNICALL destroyUserDataCompiler(JNIEnv*, jobject, jlong);

/*
 * Class:     JniAsrFix
 * Method:    crcCheck
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL crcCheck(JNIEnv*, jobject, jstring);

/*
 * Class:     JniAsrFix
 * Method:    compileDecodeNet
 * Signature:
 * (Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL compileDecodeNet(JNIEnv*, jobject, jstring, jstring,
                                        jstring);

/*
 * Class:     JniAsrFix
 * Method:    grammarCompilerSetOptionInt
 * Signature: (JII)I
 *
 */
JNIEXPORT jint JNICALL grammarCompilerSetOptionInt(JNIEnv*, jobject, jlong,
                                                   jint, jint);

/*
 * Class: JniAsrFix
 * Method: grammarCompilerGetOptionString
 * Signature: (JI)Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL grammarCompilerGetOptionString(JNIEnv*, jobject,
                                                         jlong, jint);
/*
 * Class: JniAsrFix
 * Method: setActiveNet
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL setActiveNet(JNIEnv*, jobject, jint idx);
/*
 * Class: JniAsrFix
 * Method: trackInfo
 * Signature: (I)I
 */
JNIEXPORT void JNICALL trackInfo(JNIEnv*, jobject, jint info_type);
/*
 * Class: JniAsrFix
 * Method: check_wav_end();
 * Signature:()I
 */
JNIEXPORT jint JNICALL check_wav_end(JNIEnv*, jobject);
JNIEXPORT jlong JNICALL get_vad_state(JNIEnv*, jobject);
#ifdef ENCRYPTION
/**
 * Class: JniAsrFix
 * Method: ual_std_set_end()
 * */
JNIEXPORT jint JNICALL ual_std_set_env(JNIEnv*, jobject, jstring jenv);
#endif
#ifdef __cplusplus
}
#endif
#endif
